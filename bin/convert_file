#!/usr/bin/python
# options --from <type> --to <type>

import os
import subprocess
import sys
import argparse

import rkive.clients.cl.opts

# allowed types
class ConvertFile(object):

    cmd_line  = ['pacpl', '-i', 'from_name', '-t', 'mp3', '--outfile','to_name']
    from_file_types = {
            'wav': 'flac', 
            'wma':'mp3', 
            'm4a':'mp3', 
            'ogg':'mp3', 
            'dsf':'flac'}

    def run(self):
        base = '.'
        try:
            go = rkive.clients.cl.opts.GetOpts(parent=self)
            go.p.add_argument(
                '--base', 
                nargs=1, 
                help="full path to base of files", 
                action=rkive.clients.cl.opts.BaseAction)
            go.p.add_argument(
                'infile', 
                nargs='?', 
                type=argparse.FileType('r'),
                default=sys.stdin)
            go.get_opts()
            if self.base:
                base = self.base
                for f in os.listdir(base):
                    fp = os.path.join(base, f)
                    print fp
                    self.convert_file(fp)
                sys.exit()
            if (self.infile):
                for l in self.infile:
                    self.convert_file(l.strip())
                sys.exit()
        except SystemExit:
            pass

    def convert_file(self, fp):
        import string
        if (not os.path.isfile(fp)):
            return
        rind = string.rfind(fp,'.')
        ext = fp[rind+1:]
        if (ext not in self.from_file_types.keys()):
            return
        to_fp = fp[:rind+1]+self.from_file_types[ext]
        print("Convert {0} to {1}".format(fp,to_fp))
        self.cmd_line[2] = fp 
        self.cmd_line[6] = to_fp
        subprocess.call(self.cmd_line)

if __name__ == "__main__":
    ConvertFile().run()
